# Provide a hint to vscode yaml-language-server to use the right schema file
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json#
name: Build and Release

env:
  # Local Helm variables
  HELM_RELEASE_BRANCH: DEV-canary-strategy # Branch of the helm-release repo
  # App variables
  REPO: jmspradlin/example-golang-webapp # APP Repo to be checked out of Github
  APP_NAME: example-golang-webapp # Name of the app to be released using helm
  TAG: DEV # APP branch name to be checked out of Github
  # Remote Helm chart variables
  CHART_PATH: helm/chart # Path in the APP repo to the Chart.yaml file
  CHART_TAG: "v0.0.7" # Helm Chart version (should match 'version' in Chart.yaml)
  # Azure variables
  KV_NAME: helmdeploydev # Name of the Key Vault for this deployment
  KV_SECRETS_NAME: 'acrName, acrClientID, acrCredential' # Name of the secrets as they appear in Azure Key Vault
  AKS_CLUSTER_NAME: aksdev # AKS cluster name
  AKS_RESOURCE_GROUP: aks_group_dev # AKS Cluster Resource Group
  # default environmental variables
  HELM_EXPERIMENTAL_OCI: 1
  HELM_VERSION_TO_INSTALL: 3.6.3
  MAKEFILE_SKIP_AUTH: 1


on:
  pull_request:
    branches:
      - DEV
  release:
    types:
      - prereleased
      - released

jobs:
  Core:
    # https://github.com/actions/virtual-environments
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Check out helm-release
        uses: actions/checkout@v1
        with:
          ref: ${{ env.HELM_RELEASE_BRANCH }}

      - name: Check out deployment code
        uses: actions/checkout@v2
        with:
          repository: ${{ env.REPO }}
          path: deployment
          token: ${{ secrets.GHA_PAT }}
          ref: ${{ env.TAG }}
      
      # Get Chart.yaml Version
      - name: Read Chart Version
        id: chartVersion
        run: echo ::set-output name=chartVersion::$(grep 'Version:' deployment/helm/chart/Chart.yaml | cut -d" " -f2)
      
      # Get Chart.yaml AppVersion
      - name: Read Chart appVersion
        id: chartAppVersion
        run: echo ::set-output name=appVersion::$(grep 'appVersion:' deployment/helm/chart/Chart.yaml | cut -d" " -f2)

      # Install Helm
      - name: Setup Helm
        uses: azure/setup-helm@v1
        with:
          version: ${{  env.HELM_VERSION_TO_INSTALL  }}
        id: helmInstall
      
      # Azure login using env credentials
      - name: Azure login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Get KV Secrets for this deployment
      - name: Azure Key Vault Get Secrets
        uses: Azure/get-keyvault-secrets@v1
        with: 
          keyvault: "${{ env.KV_NAME }}"
          secrets: "${{ env.KV_SECRETS_NAME }}"
        id: getKvSecrets

      # Using KV Secrets, connect Helm to ACR
      - name: Authenticate Helm to ACR
        shell: bash
        run: |
          echo "${{ steps.getKvSecrets.outputs.acrCredential }}" | helm registry login ${{ steps.getKvSecrets.outputs.acrName }}.azurecr.io \
          --username ${{ steps.getKvSecrets.outputs.acrClientID }} --password-stdin

      # Setting AKS context for release
      - name: Set AKS Context
        uses: Azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          cluster-name: ${{ env.AKS_CLUSTER_NAME }}
          resource-group: ${{ env.AKS_RESOURCE_GROUP }}

      # # Save chart
      - name: Save Helm chart
        run: |
          helm chart save ./deployment/${{ env.CHART_PATH }}/ ${{ steps.getKvSecrets.outputs.acrName }}.azurecr.io/helm/${{ env.APP_NAME }}:${{ env.CHART_TAG }}

      # # Save chart
      - name: Push Helm chart
        run: |
          helm chart push ${{ steps.getKvSecrets.outputs.acrName }}.azurecr.io/helm/${{ env.APP_NAME }}:${{ env.CHART_TAG }}

      # Export chart
      - name: Export Helm chart
        run: |
          helm chart export ${{ steps.getKvSecrets.outputs.acrName }}.azurecr.io/helm/${{ env.APP_NAME }}:${{ env.CHART_TAG }} --destination ./deploy

      # Deploy to AKS cluster
      - name: Deploy to AKS
        run: |
          helm upgrade --install ${{ env.APP_NAME }} ./deploy/${{ env.APP_NAME }}

      # - name: Deploy to AKS cluster
      #   uses: Azure/k8s-deploy@v1.4
      #   with:
      #     namespace: 'default'
      #     manifests: |
      #       ./deploy/${{ env.APP_NAME }}/templates/deployment.yaml
      #     images: '${{ steps.getKvSecrets.outputs.acrName }}.azurecr.io/helm/${{ env.APP_NAME }}:${{ env.CHART_TAG }}'
      #     strategy: canary
      #     percentage: 25
